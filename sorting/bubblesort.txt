import java.util.*;

public class bubblesort {

    

    enum OrderCase { BEST, WORST, AVERAGE }

    // ----- Helpers to detect input order -----
    static boolean isSortedAscending(int[] a) {
        for (int i = 0; i < a.length - 1; i++) if (a[i] > a[i + 1]) return false;
        return true;
    }
    static boolean isSortedDescending(int[] a) {
        for (int i = 0; i < a.length - 1; i++) if (a[i] < a[i + 1]) return false;
        return true;
    }
    static OrderCase detectCase(int[] a) {
        if (isSortedAscending(a)) return OrderCase.BEST;      // for Bubble Sort
        if (isSortedDescending(a)) return OrderCase.WORST;    // for Bubble Sort
        return OrderCase.AVERAGE;
    }

    // ----- Bubble Sort (for sorting output) -----
    static void bubbleSort(int[] arr) {
        int n = arr.length;
        boolean swapped;
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int t = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = t;
                    swapped = true;
                }
            }
            if (!swapped) break;
        }
    }

    static void printArray(int[] a) {
        for (int x : a) System.out.print(x + " ");
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();

        int[] arr = new int[n];
        System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) arr[i] = sc.nextInt();

        System.out.println("\nOriginal array:");
        printArray(arr);

        // Detect input pattern once
        OrderCase inputCase = detectCase(arr);

       
        // Bubble Sort: complexity depends on order
        System.out.println("\nBubble Sort:");
        String bubbleComplexity;
        if (inputCase == OrderCase.BEST) {
            bubbleComplexity = "O(n)  (already sorted â†’ one pass, no swaps)";
        } else {
            // both reverse-sorted and random behave quadratic
            bubbleComplexity = "O(n^2) (needs multiple passes with swaps/comparisons)";
        }
        System.out.println("Detected input case: " + inputCase);
        System.out.println("Time complexity for this input: " + bubbleComplexity);

        // ---- Show sorted arrays (optional) ----
        
        int[] a2 = Arrays.copyOf(arr, arr.length);
       
        bubbleSort(a2);

       
        System.out.println("Sorted (Bubble Sort):");
        printArray(a2);
    }
}

